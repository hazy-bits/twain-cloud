# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: twain-cloud # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

local: ${file(serverless.local.yml)} # local settings

custom:
  optimize:
      global: true
      debug: false
      minify: false
      presets: ['es2016']

plugins:
  - serverless-plugin-optimize
  - serverless-offline

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  apiKeys:
      -  dev-api-key
      -  dev-test-api-key

  environment:
    TWAIN_REGION: ${self:provider.region}
    TWAIN_SESSIONS_TABLE: "twain-cloud-sessions-v2"
    TWAIN_SCANNERS_TABLE: "twain-cloud-scanners"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:Scan

      # TODO: tweak this - we don't want to give access to all dynamoDB tables!
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

package:
  individually: true
  exclude:
    - src/**
    - test/**
    - node_modules/**


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


functions:

  getScanners:
    handler: api-cloud/scanners.getScanners
    events:
      - http:
          path: scanners
          method: get
          private: true
          cors:
            origins:
              - '*'
            headers:
              # common CORS/AWS headers
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
              # custom headers we rely on
              - X-Privet-Token
            allowCredentials: false
          integration: lambda

  loginScanner:
    handler: api-cloud/scanners.loginScanner
    events:
      - http:
          path: scanners
          method: post
          private: true
          cors:
            origins:
              - '*'
            headers:
              # common CORS/AWS headers
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
              # custom headers we rely on
              - X-Privet-Token
            allowCredentials: false
          integration: lambda

  logoffScanner:
    handler: api-cloud/scanners.logoffScanner
    events:
      - http:
          path: scanners/{scannerId}
          method: delete
          private: true
          cors:
            origins:
              - '*'
            headers:
              # common CORS/AWS headers
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
              # custom headers we rely on
              - X-Privet-Token
            allowCredentials: false
          integration: lambda

  scannerEventHandler:
    handler: api-cloud/scannerEventHandler.handler
    events:
      - iot:
          name: "twainCloudEvent"
          sql: "SELECT * FROM 'twain/scanners/+'"
          description: "TWAIN Cloud scanner event handler"

  info:
    handler: api-local/info.handler
    events:
      - http:
          path: scanners/{scannerId}/privet/info
          method: get
          private: true
          cors:
            origins:
              - '*'
            headers:
              # common CORS/AWS headers
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
              # custom headers we rely on
              - X-Privet-Token
              - X-Twain-Cloud-Key
              - X-Twain-Cloud-Secret
            allowCredentials: false
          integration: lambda
          request:
            parameters:
              paths:
                scannerId: true
            template:
              application/json: ${file(api-local/info.req.vm)}

  session:
    handler: api-local/session.handler
    events:
      - http:
          path: scanners/{scannerId}/privet/twaindirect/session
          method: post
          private: true
          cors:
            origins:
              - '*'
            headers:
              # common CORS/AWS headers
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
              # custom headers we rely on
              - X-Privet-Token
            allowCredentials: false
          integration: lambda
          request:
            parameters:
              paths:
                scannerId: true
            template:
              application/json: ${file(api-local/session.req.vm)}


#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"



resources:
  Resources:
    TwainSessionsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: sessionId
            AttributeType: S
        KeySchema:
          -
            AttributeName: sessionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TWAIN_SESSIONS_TABLE}

    TwainScannersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TWAIN_SCANNERS_TABLE}